import com.github.demidko.print.utils.printSeconds
import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.entities.ChatPermissions
import com.github.kotlintelegrambot.entities.Message
import com.github.kotlintelegrambot.entities.ParseMode.MARKDOWN_V2
import ml.demidko.timecobot.*
import java.io.Closeable
import java.io.Serializable
import java.lang.Thread.currentThread
import java.time.Instant.now
import java.util.concurrent.Executors.newSingleThreadExecutor
import kotlin.concurrent.thread
import kotlin.time.Duration.Companion.days

/**
 * –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å.
 */
class Gun(
  private val api: Bot,
  private val bank: Bank,
  private val mutedUsers: MutableMap<UserAddress, EpochSecond>
) : Closeable {

  data class UserAddress(val chatId: ChatId, val userId: UserId) : Serializable

  private companion object {

    private const val MIN_BAN = 30L

    private val MAX_BAN = days(365).inWholeSeconds

    private val NO_PERMISSIONS = ChatPermissions(
      canSendMessages = false,
      canSendMediaMessages = false,
      canSendPolls = false,
      canSendOtherMessages = false,
      canAddWebPagePreviews = false,
      canChangeInfo = false,
      canPinMessages = false,
      canInviteUsers = false,
    )

    private val ALL_PERMISSIONS = ChatPermissions(
      canSendMessages = true,
      canSendMediaMessages = true,
      canSendPolls = true,
      canSendOtherMessages = true,
      canAddWebPagePreviews = true,
      canChangeInfo = true,
      canPinMessages = true,
      canInviteUsers = true,
    )
  }

  private val executor = newSingleThreadExecutor()

  /**
   * –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (!) –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * –ë–ª–æ–∫–∏—Ä—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
   * @param request –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç—Ä–µ–ª–∫–∞
   */
  fun mute(request: Message, to: Seconds) {
    val reply = request.replyToMessage ?: return
    val victimId = reply.from?.id ?: return
    @Suppress("NAME_SHADOWING") val to = when {
      to < MIN_BAN -> MIN_BAN
      to > MAX_BAN -> MAX_BAN
      else -> to
    }
    if (bank.spend(to, request)) {
      val address = UserAddress(reply.chat.id, victimId)
      val chatId = reply.chatId()
      executor.submit {
        val mutedBefore = mutedUsers[address]?.plus(to) ?: now().epochSecond.plus(to)
        mutedUsers[address] = mutedBefore
        api.restrictChatMember(chatId, victimId, NO_PERMISSIONS, mutedBefore)
      }
      api.sendTempMessage(chatId, "üí•", replyToMessageId = reply.messageId)
      api.sendMessage(
        chatId,
        "[${request.from?.fullName}](tg://user?id=${request.from!!.id}) muted your for ${to.printSeconds()}",
        parseMode = MARKDOWN_V2,
        replyToMessageId = reply.messageId
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –¥–∞, —Ç–æ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
   */
  fun muted(m: Message): Boolean {
    val address = UserAddress(m.chat.id, m.from?.id ?: return false)
    val mutedBefore = mutedUsers[address] ?: return false
    val duration = mutedBefore - now().epochSecond
    if (duration > 0) {
      api.deleteMessage(m.chatId(), m.messageId)
      val savedMessage = m.text ?: m.toString()
      api.sendMessage(
        address.userId.telegramId(),
        "`$savedMessage`\nhas been deleted because " +
          "you were muted for ${duration.printSeconds()} in chat \n${m.chat}",
        parseMode = MARKDOWN_V2
      )
      return true
    }
    return false
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É (!) –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
   * @param request –∑–∞–ø—Ä–æ—Å –æ—Ç –¥–æ–±—Ä–æ–≥–æ —Å–∞–º–∞—Ä–∏—Ç—è–Ω–∏–Ω–∞
   */
  fun unmute(request: Message) {
    val reply = request.replyToMessage ?: return
    val address = UserAddress(reply.chat.id, reply.from?.id ?: return)
    val chatId = reply.chatId()
    executor.submit {
      val mutedBefore = mutedUsers[address] ?: return@submit
      val duration = mutedBefore - now().epochSecond
      if (bank.spend(duration, request)) {
        api.restrictChatMember(chatId, address.userId, ALL_PERMISSIONS)
        api.sendTempMessage(chatId, "You are free now!", replyToMessageId = reply.messageId)
        mutedUsers.remove(address)
      }
    }
  }

  override fun close() = executor.shutdown()

  init {
    thread {
      while (!currentThread().isInterrupted) {
        // –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è,
        // —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        val expired = mutedUsers.filterValues { it <= now().epochSecond }.keys
        if (expired.isEmpty()) {
          continue
        }
        // –ü–æ–∫–∞ –º—ã —Å–æ–±–∏—Ä–∞–ª–∏ –∫–ª—é—á–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π, –æ–Ω–∏ –º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è,
        // –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö —Å—Ç–∞–≤–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—á–µ—Ä–µ–¥—å,
        // –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –±—É–¥—É—Ç –∂–¥–∞—Ç—å –≤ SingleThreadExecutor,
        // –ø–æ—Ç–æ–º—É —Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –±—É–¥–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∏ –ø–æ–∫–∞–∂–µ—Ç –Ω–∞–º —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        // –ü—Ä–∏ —ç—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤—ã–±–æ—Ä–∫—É –∏ —Ç–µ–ø–µ—Ä—å
        // –ø—Ä–æ–π–¥–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–π, —Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç –∂–¥–∞—Ç—å –Ω–∞—Å –º–µ–Ω—å—à–µ.
        executor.submit {
          for (address in expired) {
            val epochSecond = mutedUsers[address]
            if (epochSecond != null && epochSecond <= now().epochSecond) {
              mutedUsers.remove(address)
            }
          }
        }
      }
    }
  }
}