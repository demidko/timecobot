package ml.demidko.timecobot

class Command(text: String) {

  private companion object {
    const val MINUTE_SECONDS = 60L
    const val HOUR_SECONDS = MINUTE_SECONDS * 60
    const val DAY_SECONDS = HOUR_SECONDS * 24
    const val WEEK_SECONDS = DAY_SECONDS * 7
    const val MONTH_SECONDS = DAY_SECONDS * 30
    const val YEAR_SECONDS = DAY_SECONDS * 365
    const val MIN_SECONDS = 30L
    const val MAX_SECONDS = DAY_SECONDS * 366
  }

  private val text = text.trim().lowercase()

  val isBan
    get() = startStems(
      "ban",
      "block",
      "freez",
      "mute",
      "–±–∞–Ω",
      "–±–ª–æ–∫",
      "–∑–∞–±–∞–Ω",
      "–∑–∞–≥–ª–æ—Ö",
      "–∑–∞–≤–∞–ª–∏",
      "—É–º—Ä–∏",
      "—É–º–µ—Ä",
      "–º—å—é—Ç",
      "–∑–∞–º—å—é—Ç",
      "üí•"
    )

  val isUnban
    get() = startStems(
      "liberat",
      "heal",
      "ransom",
      "atonement",
      "expiation",
      "redemption",
      "rescue",
      "salvation",
      "redeem",
      "unblock",
      "unban",
      "unmute",
      "—Ä–∞–∑–±–∞–Ω",
      "—Ä–∞–∑–±–ª–æ–∫",
      "–æ–∂–∏–≤",
      "–≤—ã–∫—É–ø",
      "–∏—Å—Ü–µ–ª",
      "–∏—Å–∫—É–ø",
      "—Å–ø–∞—Å—Ç",
      "–æ—Å–≤–æ–±–æ–¥"
    )

  val isTransfer
    get() =
      startWords("–¥–∞—Ç—å") ||
        startStems(
          "transfer",
          "give",
          "take",
          "get",
          "keep",
          "–¥–µ—Ä–∂–∏",
          "–±–µ—Ä–∏",
          "–≤–æ–∑—å–º–∏",
          "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä",
          "–ø–µ—Ä–µ–≤–æ–¥",
          "–¥–∞—Ä",
          "–ø–æ–¥–∞—Ä",
          "–≤–∑—è–ª",
          "–∑–∞–±–µ—Ä",
          "–∑–∞–±–∏—Ä",
          "–ø–µ—Ä–µ–≤–µ–¥",
          "–ø–µ—Ä–µ–≤–µ—Å—Ç",
          "–æ—Ç–ø—Ä–∞–≤",
          "send"
        )

  val isFaq
    get() = startStems(
      "–ø–æ–º–æ—â",
      "—Å–ø—Ä–∞–≤–∫",
      "–ø—Ä–∞–≤–∏–ª",
      "help",
      "rule",
      "faq",
      "onUpdateAction",
      "—Å—Ç–∞—Ä—Ç"
    )

  val isBalance
    get() = startStems(
      "time",
      "–≤—Ä–µ–º",
      "balance",
      "status",
      "score",
      "coins",
      "–±–∞–ª–∞–Ω—Å",
      "—Å—Ç–∞—Ç—É—Å",
      "—Å—á–µ—Ç",
      "—Å—á—ë—Ç",
      "—É–∑–Ω–∞",
      "timecoin",
      "check"
    )

  val isPin
    get() = startWords("–ø–∏–Ω") || startStems("–∑–∞–∫—Ä–µ–ø", "pin", "–∑–∞–ø–∏–Ω")

  val isUnpin
    get() = startWords("–ø–∏–Ω") || startStems("–æ—Ç–∫—Ä–µ–ø", "unpin", "–æ—Ç–ø–∏–Ω")

  val seconds: Long
    get() {
      val s = timeUnit * number
      return when {
        s < MIN_SECONDS -> MIN_SECONDS
        s > MAX_SECONDS -> MAX_SECONDS
        else -> s
      }
    }

  private val number: Long
    get() {
      val first = text.indexOfFirst(Char::isDigit)
      if (first == -1) {
        return 1
      }
      for (last in (first + 1) until text.length) {
        if (!text[last].isDigit()) {
          return text.substring(first until last).toLong()
        }
      }
      return text.substring(first).toLong()
    }

  /**
   * –ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   */
  private val timeUnit: Long
    get() {
      return when {
        stems("sec", "—Å–µ–∫") || words("s", "—Å") -> 1
        stems("—á–∞—Å", "hour") || words("h", "—á") -> HOUR_SECONDS
        stems("day", "—Å—É—Ç–æ–∫", "—Å—É—Ç–∫", "–¥–Ω—è", "–¥–µ–Ω", "–¥–Ω–µ")
          || words("d", "–¥") -> DAY_SECONDS
        stems("week", "–Ω–µ–¥–µ–ª") -> WEEK_SECONDS
        stems("mon", "mo", "–º–µ—Å") -> MONTH_SECONDS
        stems("year", "–≥–æ–¥", "–ª–µ—Ç") || words("y", "yr", "–≥", "–ª") -> YEAR_SECONDS
        else -> MINUTE_SECONDS
      }
    }

  /**
   * @param stem all stems must be in lower case.
   */
  private fun startStems(vararg stem: String) = stem.any(text::startsWith)

  /**
   * @param word all words must be in lower case.
   */
  private fun startWords(vararg word: String) =
    word.any { text == it || (text.startsWith(it) && !text[it.length].isLetter()) }

  /**
   * @param stem all words must be in lower case.
   */
  private fun stems(vararg stem: String) = stem.any(text::contains)

  /**
   * @param word all words must be in lower case.
   */
  private fun words(vararg word: String) = word.any {
    val first = text.indexOf(it)
    if (first == -1 || (first > 0 && text[first].isLetter())) {
      return@any false
    }
    val last = first + it.length
    if (last < text.length && text[last].isLetter()) {
      return@any false
    }
    return@any true
  }
}