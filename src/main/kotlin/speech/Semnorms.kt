package speech

/** Normalized semantic representation: defined by the rules that apply to lexemes. */
sealed class Semnorm(vararg val rules: (String) -> Boolean)

/** Weak match rule (word's stem) */
private fun stem(vararg stems: String) = { word: String ->
  stems.any(word::startsWith)
}

/** Strict match rule (whole word) */
private fun word(vararg words: String) = { word: String ->
  words.any(word::equals)
}

/** Generic type for semantic representations of time */
sealed class Time(vararg rules: (String) -> Boolean) : Semnorm(*rules)

object Year : Time(word("y", "yr", "–≥", "–ª"), stem("year", "–≥–æ–¥", "–ª–µ—Ç"))

object Month : Time(stem("mon", "mo", "–º–µ—Å"))

object Week : Time(stem("week", "–Ω–µ–¥–µ–ª"))

object Day : Time(word("d", "–¥"), stem("day", "—Å—É—Ç–æ–∫", "—Å—É—Ç–∫", "–¥–Ω—è", "–¥–µ–Ω", "–¥–Ω–µ"))

object Hour : Time(word("h", "—á"), stem("—á–∞—Å", "hour"))

object Minute : Time(word("m", "–º"), stem("min", "–º–∏–Ω"))

object Second : Time(stem("sec", "—Å–µ–∫"), word("s", "—Å"))

/** Semantic representation of balance request */
object Status : Semnorm(
  word("!"),
  stem(
    "time",
    "–≤—Ä–µ–º",
    "balance",
    "status",
    "score",
    "coins",
    "–±–∞–ª–∞–Ω—Å",
    "—Å—Ç–∞—Ç—É—Å",
    "—Å—á–µ—Ç",
    "—Å—á—ë—Ç",
    "—É–∑–Ω–∞",
    "timecoin",
    "check"
  )
)

object Pin : Semnorm(stem("–∑–∞–∫—Ä–µ–ø", "pin"), word("–ø–∏–Ω"))

/** Semantic representation of a money transfer request */
object Transfer : Semnorm(
  word(
    "–¥–∞—Ç—å"
  ),
  stem(
    "transfer",
    "give",
    "take",
    "get",
    "keep",
    "–¥–µ—Ä–∂–∏",
    "–±–µ—Ä–∏",
    "–≤–æ–∑—å–º–∏",
    "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä",
    "–ø–µ—Ä–µ–≤–æ–¥",
    "–¥–∞—Ä",
    "–ø–æ–¥–∞—Ä",
    "–≤–∑—è–ª",
    "–∑–∞–±–µ—Ä",
    "–∑–∞–±–∏—Ä",
    "–ø–µ—Ä–µ–≤–µ–¥",
    "–ø–µ—Ä–µ–≤–µ—Å—Ç",
    "send"
  )
)

/** Semantic representation of a ban request */
object Ban : Semnorm(
  stem(
    "ban",
    "block",
    "freez",
    "mute",
    "–±–∞–Ω",
    "–±–ª–æ–∫",
    "–∑–∞–±–∞–Ω",
    "–∑–∞–≥–ª–æ—Ö",
    "–∑–∞–≤–∞–ª–∏",
    "—É–º—Ä–∏",
    "—É–º–µ—Ä",
    "üí•"
  )
)

/** Semantic representation of a redeem request */
object Redeem : Semnorm(
  stem(
    "liberat",
    "heal",
    "ransom",
    "atonement",
    "expiation",
    "redemption",
    "rescue",
    "salvation",
    "redeem",
    "unblock",
    "unban",
    "unmute",
    "—Ä–∞–∑–±–∞–Ω",
    "—Ä–∞–∑–±–ª–æ–∫",
    "–æ–∂–∏–≤",
    "–≤—ã–∫—É–ø",
    "–∏—Å—Ü–µ–ª",
    "–∏—Å–∫—É–ø",
    "—Å–ø–∞—Å—Ç",
    "–æ—Å–≤–æ–±–æ–¥"
  )
)

/** Semantic representation of a faq request */
object Help : Semnorm(
  stem(
    "–ø–æ–º–æ—â",
    "?",
    "—Å–ø—Ä–∞–≤–∫",
    "–ø—Ä–∞–≤–∏–ª",
    "–ø–æ–º–æ–≥",
    "help",
    "rule",
    "faq",
    "start",
    "—Å—Ç–∞—Ä—Ç",
  )
)

/** Skip telegram-command prefix '/' */
object CommandSymbol : Semnorm(stem("/"))

/** Semantic representation of numbers */
object Number : Semnorm(stem("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))

/** List of all recognizable semantic norms */
private val semnorms = listOf(

  CommandSymbol,

  Number,

  Year,
  Month,
  Week,
  Day,
  Hour,
  Minute,
  Second,

  Status,
  Transfer,
  Ban,
  Redeem,
  Help,
  Pin
)

/**
 * Check if the word matches the semantic norm?
 * Attention! Case sensitive
 */
private fun String.matches(norm: Semnorm) = norm.rules.any { it(this) }

/**
 * We translate an arbitrary token, for example `ban` in normalized semantic representation.
 * Case insensitive.
 */
val String.semnorm get() = semnorms.firstOrNull(lowercase()::matches)